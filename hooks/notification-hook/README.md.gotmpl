---
title: "Notification Hook"
category: "hook"
type: "integration"
state: "roadmap"
usecase: "Publishes Scan Summary to MS Teams, Slack and others."
---

<!-- end -->

## Deployment

Installing the Notification hook will add a ReadOnly Hook to your namespace.

> ðŸ”§ The implementation is currently work-in-progress and still undergoing major changes. It'll be released here once it has stabilized.


```bash
helm upgrade --install nwh ./hooks/notification-hook/ --set notification.url="http://example.com/my/hook/target"
```

## Configuration of a Notification

The general configuration of a notification looks something like this

```yaml
notificationChannels:
  - name: slack
    type: slack
    template: slack-messageCard
    rules:
      - matches:
          anyOf:
            - category: "Open Port"
    endPoint: "https://webhook.some.where"
```

The Notification Hook enables you to define multiple so called `notificationChannels`. A `notificationChannel` defines the Notification to a specific platform (e.g. Slack or Teams).

The `name` is used to for debugging failing notifications.
it can be a *string* of you choice.

The `type` specifies the type of the notification (in this example slack).
Currently `slack` is the only available type but we are working on others (e.g. ms teams or email) as well.

The `template` field defines the name of a Nunjuck template to send to your notification channel.
These templates are usually tied to their notification channel (slack templates will not work for teams).
The template `slack-messageCard` is provided by default.
Notice that for the name of the template we chose to omit the file type.
The template `slack-messageCard` will point to `slack-messageCard.njk` in the filesystem of the hook.

The `endPoint` specifies where the notification has to go to.
For slack this would be your webhook URL to slack.

To define conditions when a notification should be created you can use `rules`.
If no rules are specified this hook will assume that you always want to be notified.

### Rule Configuration

The rules can be defined in the values of the Chart.
The syntax and semantic for these rules are quite similar to CascadingRules (See: [secureCodeBox | CascadingRules](/docs/api/crds/cascading-rule))
To define Rules you will have to provide the `rules` field with one or more `matches` elements.
Each `machtes` defines one Rule.
For example:

```yaml
rules:
  - matches:
      anyOf:
        - category: "Open Port"
          attributes:
            port: 23
            state: open
```

This Rule will match all Findings with an open port on 23.

#### matches

Within the `matches` you will have to provide `anyOf`
`anyOf` contains one or more conditions to be met by the finding to match the rule.
Notice that only one of this elements needs to match the finding for the rule to match.

### Configuration of a Slack Notification

To configure a slack notification set the `type` to `slack` and the `endPoint` to your Webhook URL to slack.
You can use one of the following default templates:
* slack-messageCard

## Custom Message Templates

The Notification Hook enables you to write your own message templates if the templates provided by default are not sufficient.
Templates for this hook are written using the [Nunjucks](https://mozilla.github.io/nunjucks/) templating engine.

To fill your template with data we provide the following objects.

| object   | Details                                                                                                                     |
|----------|-----------------------------------------------------------------------------------------------------------------------------|
| findings | An array of the findings matching your rules (See [Finding | secureCodeBox](https://docs.securecodebox.io/docs/api/finding) |
| scan     | An Object containing information about the scan that triggered the notification (See [Scan | secureCodeBox](https://docs.securecodebox.io/docs/api/crds/scan) |
| args     | An Array containing the information given to the scan via the `args` property in the `values.yaml`.
             `args` are used to pass additional information to the template like the url to your vulnerability management system         |

## Chart Configuration

{{ template "chart.valuesTable" . }}


