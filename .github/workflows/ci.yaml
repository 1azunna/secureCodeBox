name: "CI"
on: push

env:
  GO_VERSION: "1.15"
  PYTHON_VERSION: '3.9'

jobs:

# ---- Unit-Test ----

# ---- Unit-Test | Python ----

  unit-python:
    name: "Unit-Test | Python"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ["git_repo_scanner"]
    steps:
      - name: Checkout
        uses: actions/checkout/@v2

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r scanners/git-repo-scanner/scanner/requirements.txt

      - name: "Execute Tests"
        working-directory: scanners/git-repo-scanner/scanner/
        run: |
          pip install pytest
          pytest ${{ matrix.unit }}_test.py

  # ---- Unit-Test | JavaScript ----

  unit-javascript:
     name: "Unit-Test | JavaScript"
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@master
       - name: "list files and folders"
         run: ls
       - name: "Install npm dependencies in all parser sub projects"
         run: |
           for dir in scanners/*/parser/
           do
               cd $dir
               if [ -f package.json ] && [ -f package-lock.json ]; then
                   echo "Installing dependencies for $dir"
                   npm ci
               fi
               # cd back
               cd -
           done
       - name: "Install npm dependencies in all hook sub projects"
         run: |
           for dir in hooks/*/
           do
               cd $dir
               if [ -f package.json ] && [ -f package-lock.json ]; then
                   echo "Installing dependencies for $dir"
                   npm ci
               fi
               # cd back
               cd -
           done
       - name: "Install npm test dependencies"
         run: |
           npm ci
           cd scanners/
           npm ci
           cd -
           cd hooks/
           npm ci
       - name: "Compile Typescript"
         run: |
           cd hooks/declarative-subsequent-scans
           npm run build
       #- name: "Run tests & publish code coverage"
       #  uses: paambaati/codeclimate-action@v2.6.0
       #  env:
       #    CC_TEST_REPORTER_ID: a09c9e6ef697176ac6ec9f71063e2d18156aa1a904e2dd62ba2b68fab1d22ced
       #  with:
       #    coverageCommand: npm test -- --ci --colors --coverage

# ---- Build Stage ----

# ---- Build Stage | Operator & Lurcher ----

  operator:
    name: "Build | Operator"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ["operator", "lurcher"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        run: |
          cd ${{ matrix.component }}/
          go fmt ./...
          go vet ./...

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ matrix.component }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

# ---- Build Stage | SDK Matrix ----

  sdk:
    name: "Build | Matrix SDK"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sdk: ["parser-sdk", "hook-sdk"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ matrix.sdk }}-nodejs
          tag-sha: true
          tag-custom: ci-local
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.sdk }}/nodejs
          file: ./${{ matrix.sdk }}/nodejs/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

# ---- Build Stage | Matrix Hooks

  hooks:
    name: "Build | Hooks"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hook: [
          "generic-webhook",
          "update-field"
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ matrix.hook }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./hooks/${{ matrix.hook }}
          file: ./hooks/${{ matrix.hook }}/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

# ---- Build Stage | Matrix Parsers

  parsers:
    name: "Build | Parsers"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parser: [
          "amass",
          "git-repo-scanner"
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ matrix.parser }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.parser }}/parser
          file: ./scanners/${{ matrix.parser }}/parser/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Build | Scanners ----

  scanners:
  # Note we only build images for scanner that don't provider official public container images
    name: "Build | Scanner"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - scanner: gitleaks
            tags: "v6.1.2, latest"
          - scanner: ncrack
            tags: "0.7, latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          tag-sha: true
          tag-custom: ${{ matrix.tags }}
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/scanner
          file: ./scanners/${{ matrix.scanner }}/scanner/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
