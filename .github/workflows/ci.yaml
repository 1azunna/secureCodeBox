name: "CI"
on: push

env:
  # ---- Language Versions ----

  GO_VERSION: "1.15"
  PYTHON_VERSION: "3.9"

  # ---- Docker Namespace ----
  DOCKER_NAMESPACE: fuhrmeistery

jobs:
  # ---- Unit-Test ----

  # ---- Unit-Test | Python ----

  unit-python:
    name: "Unit-Test | Python"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ["git_repo_scanner"]
    steps:
      - name: Checkout
        uses: actions/checkout/@v2

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r scanners/git-repo-scanner/scanner/requirements.txt

      - name: "Execute Tests"
        working-directory: scanners/git-repo-scanner/scanner/
        run: |
          pip install pytest
          pytest ${{ matrix.unit }}_test.py

  # ---- Unit-Test | JavaScript ----

  unit-javascript:
    name: "Unit-Test | JavaScript"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: "list files and folders"
        run: ls
      - name: "Install npm dependencies in all parser sub projects"
        run: |
          for dir in scanners/*/parser/
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm dependencies in all hook sub projects"
        run: |
          for dir in hooks/*/
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm test dependencies"
        run: |
          npm ci
          cd scanners/
          npm ci
          cd -
          cd hooks/
          npm ci
      - name: "Compile Typescript"
        run: |
          cd hooks/declarative-subsequent-scans
          npm run build
      #- name: "Run tests & publish code coverage"
      #  uses: paambaati/codeclimate-action@v2.6.0
      #  env:
      #    CC_TEST_REPORTER_ID: a09c9e6ef697176ac6ec9f71063e2d18156aa1a904e2dd62ba2b68fab1d22ced
      #  with:
      #    coverageCommand: npm test -- --ci --colors --coverage

  # ---- Build Stage ----

  # ---- Build Stage | Operator & Lurcher ----

  operator:
    name: "Build | Operator"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ["operator", "lurcher"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        run: |
          cd ${{ matrix.component }}/
          go fmt ./...
          go vet ./...

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.component }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Build Stage | SDK Matrix ----

  sdk:
    name: "Build | Matrix SDK"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sdk: ["parser-sdk", "hook-sdk"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.sdk }}-nodejs
          tag-sha: true
          tag-custom: ci-local
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.sdk }}/nodejs
          file: ./${{ matrix.sdk }}/nodejs/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Build Stage | Matrix Hooks

  hooks:
    name: "Build | Hooks"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hook: ["declarative-subsequent-scans", "finding-post-processing", "generic-webhook", "persistence-elastic", "update-field"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.hook }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./hooks/${{ matrix.hook }}
          file: ./hooks/${{ matrix.hook }}/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Build Stage | Matrix Parsers

  parsers:
    name: "Build | Parsers"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parser: ["amass", "git-repo-scanner", "gitleaks", "kube-hunter", "ncrack", "nikto", "nmap", "screenshooter", "ssh_scan", "sslyze", "test-scan", "trivy", "wpscan", "zap"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.parser }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.parser }}/parser
          file: ./scanners/${{ matrix.parser }}/parser/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Build | Scanners ----

  # Note we only build images for scanner that don't provider official public container images
  scanners:
    name: "Build | Scanner"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - scanner: gitleaks
            tags: "v6.1.2, latest"
          - scanner: ncrack
            tags: "0.7, latest"
          - scanner: test-scan
            tags: "latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          tag-sha: true
          tag-custom: ${{ matrix.tags }}
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/scanner
          file: ./scanners/${{ matrix.scanner }}/scanner/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  scanner-nikto:
    # This Scanner has to be build seperately because the official image is only on GitHub but not on DockerHub
    name: "Build | Scanner | Nikto"
    needs: [unit-python, unit-javascript]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout secureCodeBox
        uses: actions/checkout/@v2
        with:
          path: scb

      - name: "Checkout Nikto"
        uses: actions/checkout/@v2
        with:
          repository: "sullo/nikto"
          path: nikto

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and Push Nikto to Local Registry
        uses: docker/build-push-action@v2
        with:
          context: ./nikto/
          file: ./nikto/Dockerfile
          push: true
          tags: localhost:5000/sullo/nikto:latest

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/scanner-nikto
          tag-sha: true
          tag-custom: latest, 2.1.6
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scb/scanners/nikto/scanner
          file: ./scb/scanners/nikto/scanner/Dockerfile
          build-args: |
            baseImageTag=ci-local
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  # ---- Integration Tests ----

  Integration-tests:
    name: Integration Tests | k8s ${{ matrix.k8sVersion }}
    needs: [operator, hooks, parsers, scanners, scanner-nikto]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8sVersion: ["1.20.0"]
    steps:
      - uses: actions/checkout@master
      - name: "Start kind cluster"
        run: |
          kind create cluster --image kindest/node:v${{ matrix.k8sVersion }} --wait 3m
      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node
      - name: "Install Operator"
        run: |
          # Namespace in which the scans for the tests will be executed
          kubectl create namespace integration-tests
          # Operator Namespace
          kubectl create namespace securecodebox-system
          # Install Operator using the images of the current commit
          helm -n securecodebox-system install securecodebox-operator ./operator/ --wait \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/operator" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="lurcher.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/lurcher" \
            --set="lurcher.image.tag=sha-$(git rev-parse --short HEAD)" \
      - name: "Inspect Operator"
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Pods in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: "Create 'demo-apps' namespace"
        run: "kubectl create namespace demo-apps"
      - name: "Install Test Dependencies"
        run: |
          cd tests/integration/
          npm ci
      # This steps should include Integration tests which are not related to a Specific Scanner
      - name: "Throws NoScanDefinition Error Integration Tests"
        run: |
          cd tests/integration/
          npx jest --ci --color generic/no-scan-definition-error.test.js
      - name: "Hooks (ReadAndWrite) Integration Tests"
        run: |
          helm -n integration-tests install update-category ./hooks/update-field/ \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/update-field" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="attribute.name=category" \
            --set="attribute.value=fancy-category"
          helm -n integration-tests install update-severity ./hooks/update-field/ \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/update-field" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="attribute.name=severity" \
            --set="attribute.value=high"
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parserImage.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/test-scan" \
            --set="parserImage.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)"
          cd tests/integration/
          npx jest --ci --color generic/read-write-hook.test.js
          helm -n integration-tests uninstall test-scan update-category update-severity
      - name: "Hooks (ReadOnly) Integration Tests"
        run: |
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parserImage.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/test-scan" \
            --set="parserImage.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)"
          helm -n integration-tests install http-webhook ./demo-apps/http-webhook
          helm -n integration-tests install ro-hook ./hooks/generic-webhook/ \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/generic-webhook" \
            --set="webhookUrl=http://http-webhook/hallo-welt" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)"
          cd tests/integration/
          npx jest --ci --color generic/read-only-hook.test.js
          helm -n integration-tests uninstall test-scan http-webhook ro-hook
