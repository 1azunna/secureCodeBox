#!/usr/bin/env python3

import logging
from zapv2 import ZAPv2

from zap_configuration import ZapConfiguration
from zap_extended import ZapExtended

#######################################
### BEGINNING OF CONFIGURATION AREA ###
#######################################
## The user only needs to change variable values bellow to make the script
## work according to his/her needs. MANDATORY parameters must not be empty

# MANDATORY. Define the API key generated by ZAP and used to verify actions.
apiKey='eor898q1luuq8054e0e5r9s3jh'

# MANDATORY. Define the listening address of ZAP instance
localProxy = {"http": "http://127.0.0.1:8010", "https": "http://127.0.0.1:8010"}

#################################
### END OF CONFIGURATION AREA ###
#################################

# set up logging to file - see previous section for more details
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)-12s %(levelname)-8s: %(message)s',
                    datefmt='%Y-%m-%d %H:%M',
                    filename='zap-extended.log',
                    filemode='w')

logging.info('Configuring ZAP Instance with %s', localProxy)
# Connect ZAP API client to the listening address of ZAP instance
zap = ZAPv2(proxies=localProxy, apikey=apiKey)

testYaml1 = "./examples/scan-overlay/"
testYaml2 = "./examples/empty-files/"
testYaml3 = "./examples/empty/"
testYaml4 = "./examples/scan-overlay-secrets/"
testYaml5 = "./examples/bodgeit/"

config = ZapConfiguration(testYaml5, "")

#logging.debug("ZAP Configuration: %s", config.get_config())
#logging.debug("ZAP Configuration/Contexts: %s", config.get_zap_contexts())
#logging.debug("ZAP Configuration/Contexts/1: %s", config.get_zap_context(1))

# Starting to configure the ZAP Instance based on the given Configuration
local_zap = ZapExtended(zap, [])
local_zap.configure_context(zap, config.get_zap_contexts())

