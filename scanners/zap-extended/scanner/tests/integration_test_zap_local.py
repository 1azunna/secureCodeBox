#!/usr/bin/env python3

import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

import logging
from zapv2 import ZAPv2

from scbzapv2 import ZapConfiguration
from scbzapv2 import ZapConfigureContext
from scbzapv2 import ZapConfigureSpider
from scbzapv2 import ZapConfigureActiveScanner

#######################################
### BEGINNING OF CONFIGURATION AREA ###
#######################################
## The user only needs to change variable values bellow to make the script
## work according to his/her needs. MANDATORY parameters must not be empty

# MANDATORY. Define the API key generated by ZAP and used to verify actions.
apiKey='eor898q1luuq8054e0e5r9s3jh'

# MANDATORY. Define the listening address of ZAP instance
localProxy = {"http": "http://127.0.0.1:8010", "https": "http://127.0.0.1:8010"}

#################################
### END OF CONFIGURATION AREA ###
#################################

# set up logging to file - see previous section for more details
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)-12s %(levelname)-8s: %(message)s',
                    datefmt='%Y-%m-%d %H:%M',
                    filename='zap-extended.log',
                    filemode='w')

logging.info('Configuring ZAP Instance with %s', localProxy)
# Connect ZAP API client to the listening address of ZAP instance
zap = ZAPv2(proxies=localProxy, apikey=apiKey)

testYaml1 = "./tests/mocks/empty-files/"
testYaml2 = "./tests/mocks/empty/"
testYaml3 = "./tests/mocks/context-with-overlay/"
testYaml4 = "./tests/mocks/context-with-overlay-secrets/"
testYaml5 = "./tests/mocks/scan-full-bodgeit/"
testYaml6 = "./tests/mocks/scan-full-secureCodeBox.io/"

logging.info("HERE"+ str(sys.path))

config = ZapConfiguration(testYaml6)

logging.debug("ZAP Configuration: %s with type %s", config.get_config(), type(config.get_config()))
logging.debug("ZAP Configuration/Contexts: %s with type %s", config.get_contexts(), type(config.get_contexts()))
logging.debug("ZAP Configuration/Contexts/0: %s with type %s", config.get_context_by_index(0), type(config.get_context_by_index(0)))

# Starting to configure the ZAP Instance based on the given Configuration
if config.has_configurations() and config.has_context_configurations:
    local_zap_context = ZapConfigureContext(zap, config)

if config.has_spider_configurations:
    local_zap_spider = ZapConfigureSpider(zap, config)
    spider_id=local_zap_spider.start_spider_by_index(0, False)
    local_zap_spider.wait_until_finished(spider_id)

if config.has_scan_configurations:
    local_zap_scan = ZapConfigureActiveScanner(zap, config)
    scanner_id=local_zap_scan.start_scan_by_index(0)
    local_zap_scan.wait_until_finished(scanner_id)
